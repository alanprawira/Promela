never sWE {    /* !([] (! ((statuses[(1-1)]) && ((((statuses[(3-1)]) || (statuses[(5-1)])) || (statuses[(4-1)])) || (statuses[(6-1)]))))) */
T0_init:
	do
	:: atomic { (! ((! ((statuses[(1-1)]) && ((((statuses[(3-1)]) || (statuses[(5-1)])) || (statuses[(4-1)])) || (statuses[(6-1)])))))) -> assert(!(! ((! ((statuses[(1-1)]) && ((((statuses[(3-1)]) || (statuses[(5-1)])) || (statuses[(4-1)])) || (statuses[(6-1)]))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never sNE {    /* !([] (! ((statuses[(2-1)]) && (((statuses[(3-1)]) || (statuses[(4-1)])) || (statuses[(6-1)]))))) */
T0_init:
	do
	:: atomic { (! ((! ((statuses[(2-1)]) && (((statuses[(3-1)]) || (statuses[(4-1)])) || (statuses[(6-1)])))))) -> assert(!(! ((! ((statuses[(2-1)]) && (((statuses[(3-1)]) || (statuses[(4-1)])) || (statuses[(6-1)]))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never sES {    /* !([] (! ((statuses[(3-1)]) && (((((statuses[(6-1)]) || (statuses[(4-1)])) || (statuses[(2-1)])) || (statuses[(5-1)])) || (statuses[(1-1)]))))) */
T0_init:
	do
	:: atomic { (! ((! ((statuses[(3-1)]) && (((((statuses[(6-1)]) || (statuses[(4-1)])) || (statuses[(2-1)])) || (statuses[(5-1)])) || (statuses[(1-1)])))))) -> assert(!(! ((! ((statuses[(3-1)]) && (((((statuses[(6-1)]) || (statuses[(4-1)])) || (statuses[(2-1)])) || (statuses[(5-1)])) || (statuses[(1-1)]))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never sSN {    /* !([] (! ((statuses[(4-1)]) && (((statuses[(1-1)]) || (statuses[(2-1)])) || (statuses[(3-1)]))))) */
T0_init:
	do
	:: atomic { (! ((! ((statuses[(4-1)]) && (((statuses[(1-1)]) || (statuses[(2-1)])) || (statuses[(3-1)])))))) -> assert(!(! ((! ((statuses[(4-1)]) && (((statuses[(1-1)]) || (statuses[(2-1)])) || (statuses[(3-1)]))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never sSW {    /* !([] (! ((statuses[(5-1)]) && ((statuses[(1-1)]) || (statuses[(3-1)]))))) */
T0_init:
	do
	:: atomic { (! ((! ((statuses[(5-1)]) && ((statuses[(1-1)]) || (statuses[(3-1)])))))) -> assert(!(! ((! ((statuses[(5-1)]) && ((statuses[(1-1)]) || (statuses[(3-1)]))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never sPED {    /* !([] (! ((statuses[(6-1)]) && (((statuses[(1-1)]) || (statuses[(2-1)])) || (statuses[(3-1)]))))) */
T0_init:
	do
	:: atomic { (! ((! ((statuses[(6-1)]) && (((statuses[(1-1)]) || (statuses[(2-1)])) || (statuses[(3-1)])))))) -> assert(!(! ((! ((statuses[(6-1)]) && (((statuses[(1-1)]) || (statuses[(2-1)])) || (statuses[(3-1)]))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never l1 {    /* !([] ((! (((queue[(1-1)]==1)) && ((statuses[(1-1)]==0)))) || (<> ((statuses[(1-1)]==1))))) */
T0_init:
	do
	:: (! ((! (((queue[(1-1)]==1)) && ((statuses[(1-1)]==0))))) && ! (((statuses[(1-1)]==1)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(1-1)]==1)))) -> goto accept_S4
	od;
}
never l2 {    /* !([] ((! (((queue[(2-1)]==1)) && ((statuses[(2-1)]==0)))) || (<> ((statuses[(2-1)]==1))))) */
T0_init:
	do
	:: (! ((! (((queue[(2-1)]==1)) && ((statuses[(2-1)]==0))))) && ! (((statuses[(2-1)]==1)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(2-1)]==1)))) -> goto accept_S4
	od;
}
never l3 {    /* !([] ((! (((queue[(3-1)]==1)) && ((statuses[(3-1)]==0)))) || (<> ((statuses[(3-1)]==1))))) */
T0_init:
	do
	:: (! ((! (((queue[(3-1)]==1)) && ((statuses[(3-1)]==0))))) && ! (((statuses[(3-1)]==1)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(3-1)]==1)))) -> goto accept_S4
	od;
}
never l4 {    /* !([] ((! (((queue[(4-1)]==1)) && ((statuses[(4-1)]==0)))) || (<> ((statuses[(4-1)]==1))))) */
T0_init:
	do
	:: (! ((! (((queue[(4-1)]==1)) && ((statuses[(4-1)]==0))))) && ! (((statuses[(4-1)]==1)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(4-1)]==1)))) -> goto accept_S4
	od;
}
never l5 {    /* !([] ((! (((queue[(5-1)]==1)) && ((statuses[(5-1)]==0)))) || (<> ((statuses[(5-1)]==1))))) */
T0_init:
	do
	:: (! ((! (((queue[(5-1)]==1)) && ((statuses[(5-1)]==0))))) && ! (((statuses[(5-1)]==1)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(5-1)]==1)))) -> goto accept_S4
	od;
}
never l6 {    /* !([] ((! (((queue[(6-1)]==1)) && ((statuses[(6-1)]==0)))) || (<> ((statuses[(6-1)]==1))))) */
T0_init:
	do
	:: (! ((! (((queue[(6-1)]==1)) && ((statuses[(6-1)]==0))))) && ! (((statuses[(6-1)]==1)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(6-1)]==1)))) -> goto accept_S4
	od;
}
never f1 {    /* !([] (<> ((statuses[(1-1)]==0)))) */
T0_init:
	do
	:: (! (((statuses[(1-1)]==0)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(1-1)]==0)))) -> goto accept_S4
	od;
}
never f2 {    /* !([] (<> ((statuses[(2-1)]==0)))) */
T0_init:
	do
	:: (! (((statuses[(2-1)]==0)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(2-1)]==0)))) -> goto accept_S4
	od;
}
never f3 {    /* !([] (<> ((statuses[(3-1)]==0)))) */
T0_init:
	do
	:: (! (((statuses[(3-1)]==0)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(3-1)]==0)))) -> goto accept_S4
	od;
}
never f4 {    /* !([] (<> ((statuses[(4-1)]==0)))) */
T0_init:
	do
	:: (! (((statuses[(4-1)]==0)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(4-1)]==0)))) -> goto accept_S4
	od;
}
never f5 {    /* !([] (<> ((statuses[(5-1)]==0)))) */
T0_init:
	do
	:: (! (((statuses[(5-1)]==0)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(5-1)]==0)))) -> goto accept_S4
	od;
}
never f6 {    /* !([] (<> ((statuses[(6-1)]==0)))) */
T0_init:
	do
	:: (! (((statuses[(6-1)]==0)))) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((statuses[(6-1)]==0)))) -> goto accept_S4
	od;
}
